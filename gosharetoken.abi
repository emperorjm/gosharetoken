{
  "tables": [
    {
      "index_type": "i64", 
      "key_types": [
        "uint64"
      ], 
      "type": "config", 
      "name": "configs", 
      "key_names": [
        "config_id"
      ]
    }, 
    {
      "index_type": "i64", 
      "key_types": [
        "asset"
      ], 
      "type": "account", 
      "name": "accounts", 
      "key_names": [
        "balance"
      ]
    }, 
    {
      "index_type": "i64", 
      "key_types": [
        "name"
      ], 
      "type": "stake_row", 
      "name": "stakes", 
      "key_names": [
        "stake_account"
      ]
    }, 
    {
      "index_type": "i64", 
      "key_types": [
        "asset"
      ], 
      "type": "currencystat", 
      "name": "stat", 
      "key_names": [
        "supply"
      ]
    }
  ], 
  "____comment": "This file was generated by eosio-abigen. DO NOT EDIT - 2018-09-26T01:54:48", 
  "abi_extensions": [], 
  "actions": [
    {
      "type": "create", 
      "name": "create", 
      "ricardian_contract": "# Action - `{{ create }}`\n\nThis Contract is legally binding and can be used in the event of a dispute. Disputes shall be settled through the standard arbitration process established by EOS.IO.\n\n### Description\n\nThe `{{ create }}` action... [Original] unmodified from EOSIO delivered eosio.token contract\n\n### Inputs and Input Types\n\nThe `{{ create }}` action requires the following `inputs` and `input types`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ create }}` | `{{ issuerVar }}`<br/>`{{ maximum_supplyVar }}` | `{{ name }}`<br/>`{{ asset }}` |\n"
    }, 
    {
      "type": "issue", 
      "name": "issue", 
      "ricardian_contract": "# Action - `{{ issue }}`\n\nThis Contract is legally binding and can be used in the event of a dispute. Disputes shall be settled through the standard arbitration process established by EOS.IO.\n\n### Description\n\nThe `{{ issue }}` action... [Original] unmodified from EOSIO delivered eosio.token contract\n\n### Inputs and Input Types\n\nThe `{{ issue }}` action requires the following `inputs` and `input types`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ issue }}` | `{{ toVar }}`<br/>`{{ quantityVar }}`<br/>`{{ memoVar }}` | `{{ name }}`<br/>`{{ asset }}`<br/>`{{ string }}` |\n"
    }, 
    {
      "type": "issuefree", 
      "name": "issuefree", 
      "ricardian_contract": ""
    }, 
    {
      "type": "burn", 
      "name": "burn", 
      "ricardian_contract": "## Burn Terms & Conditions\n\nI, {{from}} acknowledge that {{quantity}} will be irreversibly removed from my balance and this contract's supply.\nI, {{from}} acknowledge that if {{quantity}} is zero I am removing my interest in this contract and symbol with the desire of recovering my RAM costs.\n"
    }, 
    {
      "type": "signup", 
      "name": "signup", 
      "ricardian_contract": "## Signup Terms & Conditions\n\nI, {{owner}} am simply registering my interest in this contract and symbol by creating a table row and assuming my own costs for RAM.\n"
    }, 
    {
      "type": "transfer", 
      "name": "transfer", 
      "ricardian_contract": "## Transfer Terms & Conditions\n\nI, {{from}}, certify the following to be true to the best of my knowledge:\n\n1. I certify that {{quantity}} is not the proceeds of fraudulent or violent activities.\n2. I certify that, to the best of my knowledge, {{to}} is not supporting initiation of violence against others.\n3. I have disclosed any contractual terms & conditions with respect to {{quantity}} to {{to}}.\n\nI understand that funds transfers are not reversible after the {{transaction.delay}} seconds or other delay as configured by {{from}}'s permissions.\n\nIf this action fails to be irreversibly confirmed after receiving goods or services from '{{to}}', I agree to either return the goods or services or resend {{quantity}} in a timely manner.\n"
    }, 
    {
      "type": "transferfree", 
      "name": "transferfree", 
      "ricardian_contract": ""
    }, 
    {
      "type": "setoverflow", 
      "name": "setoverflow", 
      "ricardian_contract": ""
    }, 
    {
      "type": "running", 
      "name": "running", 
      "ricardian_contract": ""
    }, 
    {
      "type": "stake", 
      "name": "stake", 
      "ricardian_contract": ""
    }, 
    {
      "type": "claim", 
      "name": "claim", 
      "ricardian_contract": "# Action - `{{ claim }}`\n\nThis Contract is legally binding and can be used in the event of a dispute. Disputes shall be settled through the standard arbitration process established by EOS.IO.\n\n### Description\n\nThe `{{ claim }}` action...\nINTENT: The intent of claim is to allow users to move token awards from escrow to the staked token storage in the stakes table and to update the users next period stake amount. The users next payout is based on the additional tokens deposited by the system this action also serves to demark the line when the tokens move under user ownership and no longer subject to forfeiture for early withdrawal from the stake period. User participation is required for this action due to the BP-imposed timeout for transactions over 250ms, which will not allow a contract-driven global claim function to be fully executed when over 100 users have staked to the system.\nTERM: This action lasts for the duration of the processing of the contract.  \n\n### Input and Input Type\n\nThe `{{ claim }}` action requires the following `input` and `input type`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ claim }}` | `{{ _stake_accountVar }}` | `{{ name }}` |\n"
    }, 
    {
      "type": "unstake", 
      "name": "unstake", 
      "ricardian_contract": ""
    }, 
    {
      "type": "checkrun", 
      "name": "checkrun", 
      "ricardian_contract": "# Action - `{{ checkrun }}`\n\nThis Contract is legally binding and can be used in the event of a dispute. Disputes shall be settled through the standard arbitration process established by EOS.IO.\n\n### Description\n\nThe `{{ checkrun }}` action...\nINTENT: The intent of checkrun action is to allow the contract owner to review the outcome of an impending execution of the runpayout action. It does not modify any data in tables or otherwise It simply report on the outcome of the current payout forecast for stakers based on current user stake adoption and bonus settings. Execution is restricted to owner only permissions. \nTERM: This action lasts for the duration of the processing of the contract.  \n\n### Input and Input Type\n\nThe `{{ checkrun }}` action requires the following `input` and `input type`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ checkrun }}` | `{{ _bonusVar }}` | `{{ uint64 }}` |\n"
    }, 
    {
      "type": "addbonus", 
      "name": "addbonus", 
      "ricardian_contract": "# Action - `{{ addbonus }}`\n\nThis Contract is legally binding and can be used in the event of a dispute. Disputes shall be settled through the standard arbitration process established by EOS.IO.\n\n### Description\n\nThe `{{ addbonus }}` action... \n\nINTENT:\u00a0The intent of {{ addbonus }} is to allow an EOS account to add additional EDNA Tokens to the total payout bonus available for the current weekly payout. This most usually will come from the overflow account, but could come from elsewhere. Adding to the payout bonus is always at the sole discretion of the contract owner.    \n\nTERM:\u00a0This action lasts for the duration of the processing of the contract.\n\n### Inputs and Input Types\n\nThe `{{ addbonus }}` action requires the following `inputs` and `input types`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ addbonus }}` | `{{ _senderVar }}`<br/>`{{ _bonusVar }}` | `{{ name }}`<br/>`{{ asset }}` |\n"
    }, 
    {
      "type": "rembonus", 
      "name": "rembonus", 
      "ricardian_contract": ""
    }, 
    {
      "type": "runpayout", 
      "name": "runpayout", 
      "ricardian_contract": ""
    }, 
    {
      "type": "initstats", 
      "name": "initstats", 
      "ricardian_contract": "# Action - `{{ initstats }}`\n\nThis Contract is legally binding and can be used in the event of a dispute. Disputes shall be settled through the standard arbitration process established by EOS.IO.\n\n### Description\n\nThe `{{ initstats }}` action...\nNTENT: The intent of initstats is initialize the contract by placing \"0.0000 EDNA\" in two fields of the config table, and zeros in the config fields of the same table that track user participation amounts and staked account counts. It is intended to be executed once after the initial deployment of the contract and before executing the running action to enable contract staking functions. It could also serve to reset the contract for use under a different stake table in the event of some sort of unforeseen contract failure. Execution is restricted to owner only permissions. \nTERM: This action lasts for the duration of the processing of the contract. \n\n### Input and Input Type\n\nThe `{{ initstats }}` action requires the following `input` and `input type`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ initstats }}` | `{{ initstatsVar }}` | `{{ initstats }}` |\n"
    }
  ], 
  "error_messages": [], 
  "version": "eosio::abi/1.0", 
  "ricardian_clauses": [], 
  "variants": [], 
  "structs": [
    {
      "fields": [
        {
          "type": "uint64", 
          "name": "config_id"
        }, 
        {
          "type": "uint8", 
          "name": "running"
        }, 
        {
          "type": "name", 
          "name": "overflow"
        }, 
        {
          "type": "uint32", 
          "name": "active_accounts"
        }, 
        {
          "type": "asset", 
          "name": "staked_weekly"
        }, 
        {
          "type": "asset", 
          "name": "staked_monthly"
        }, 
        {
          "type": "asset", 
          "name": "staked_quarterly"
        }, 
        {
          "type": "asset", 
          "name": "total_staked"
        }, 
        {
          "type": "asset", 
          "name": "total_escrowed_monthly"
        }, 
        {
          "type": "asset", 
          "name": "total_escrowed_quarterly"
        }, 
        {
          "type": "uint64", 
          "name": "total_shares"
        }, 
        {
          "type": "asset", 
          "name": "base_payout"
        }, 
        {
          "type": "asset", 
          "name": "bonus"
        }, 
        {
          "type": "asset", 
          "name": "total_payout"
        }, 
        {
          "type": "asset", 
          "name": "interest_share"
        }, 
        {
          "type": "asset", 
          "name": "unclaimed_tokens"
        }, 
        {
          "type": "asset", 
          "name": "spare_a1"
        }, 
        {
          "type": "asset", 
          "name": "spare_a2"
        }, 
        {
          "type": "uint64", 
          "name": "spare_i1"
        }, 
        {
          "type": "uint64", 
          "name": "spare_i2"
        }
      ], 
      "base": "", 
      "name": "config"
    }, 
    {
      "fields": [
        {
          "type": "asset", 
          "name": "balance"
        }
      ], 
      "base": "", 
      "name": "account"
    }, 
    {
      "fields": [
        {
          "type": "name", 
          "name": "stake_account"
        }, 
        {
          "type": "uint8", 
          "name": "stake_period"
        }, 
        {
          "type": "asset", 
          "name": "staked"
        }, 
        {
          "type": "uint32", 
          "name": "stake_date"
        }, 
        {
          "type": "uint32", 
          "name": "stake_due"
        }, 
        {
          "type": "asset", 
          "name": "escrow"
        }
      ], 
      "base": "", 
      "name": "stake_row"
    }, 
    {
      "fields": [
        {
          "type": "asset", 
          "name": "supply"
        }, 
        {
          "type": "asset", 
          "name": "max_supply"
        }, 
        {
          "type": "name", 
          "name": "issuer"
        }
      ], 
      "base": "", 
      "name": "currencystat"
    }, 
    {
      "fields": [
        {
          "type": "name", 
          "name": "issuer"
        }, 
        {
          "type": "asset", 
          "name": "maximum_supply"
        }
      ], 
      "base": "", 
      "name": "create"
    }, 
    {
      "fields": [
        {
          "type": "name", 
          "name": "to"
        }, 
        {
          "type": "asset", 
          "name": "quantity"
        }, 
        {
          "type": "string", 
          "name": "memo"
        }
      ], 
      "base": "", 
      "name": "issue"
    }, 
    {
      "fields": [
        {
          "type": "name", 
          "name": "to"
        }, 
        {
          "type": "asset", 
          "name": "quantity"
        }, 
        {
          "type": "string", 
          "name": "memo"
        }
      ], 
      "base": "", 
      "name": "issuefree"
    }, 
    {
      "fields": [
        {
          "type": "name", 
          "name": "from"
        }, 
        {
          "type": "asset", 
          "name": "quantity"
        }, 
        {
          "type": "string", 
          "name": "memo"
        }
      ], 
      "base": "", 
      "name": "burn"
    }, 
    {
      "fields": [
        {
          "type": "name", 
          "name": "owner"
        }, 
        {
          "type": "asset", 
          "name": "quantity"
        }
      ], 
      "base": "", 
      "name": "signup"
    }, 
    {
      "fields": [
        {
          "type": "name", 
          "name": "from"
        }, 
        {
          "type": "name", 
          "name": "to"
        }, 
        {
          "type": "asset", 
          "name": "quantity"
        }, 
        {
          "type": "string", 
          "name": "memo"
        }
      ], 
      "base": "", 
      "name": "transfer"
    }, 
    {
      "fields": [
        {
          "type": "name", 
          "name": "from"
        }, 
        {
          "type": "name", 
          "name": "to"
        }, 
        {
          "type": "asset", 
          "name": "quantity"
        }, 
        {
          "type": "string", 
          "name": "memo"
        }
      ], 
      "base": "", 
      "name": "transferfree"
    }, 
    {
      "fields": [
        {
          "type": "name", 
          "name": "_overflow"
        }
      ], 
      "base": "", 
      "name": "setoverflow"
    }, 
    {
      "fields": [
        {
          "type": "uint8", 
          "name": "on_switch"
        }
      ], 
      "base": "", 
      "name": "running"
    }, 
    {
      "fields": [
        {
          "type": "name", 
          "name": "_stake_account"
        }, 
        {
          "type": "uint8", 
          "name": "_stake_period"
        }, 
        {
          "type": "asset", 
          "name": "_staked"
        }
      ], 
      "base": "", 
      "name": "stake"
    }, 
    {
      "fields": [
        {
          "type": "name", 
          "name": "_stake_account"
        }
      ], 
      "base": "", 
      "name": "claim"
    }, 
    {
      "fields": [
        {
          "type": "name", 
          "name": "_stake_account"
        }
      ], 
      "base": "", 
      "name": "unstake"
    }, 
    {
      "fields": [], 
      "base": "", 
      "name": "checkrun"
    }, 
    {
      "fields": [
        {
          "type": "name", 
          "name": "_sender"
        }, 
        {
          "type": "asset", 
          "name": "_bonus"
        }
      ], 
      "base": "", 
      "name": "addbonus"
    }, 
    {
      "fields": [], 
      "base": "", 
      "name": "rembonus"
    }, 
    {
      "fields": [], 
      "base": "", 
      "name": "runpayout"
    }, 
    {
      "fields": [], 
      "base": "", 
      "name": "initstats"
    }
  ], 
  "types": []
}